generator client {
  provider = "prisma-client-js"
}

// to generate dtos/entities
generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src"
  outputToNestJsResourceStructure = "true"
  exportRelationModifierClasses   = "false"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "kebab"
  classValidation                 = "true"
  prettier                        = "true"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // no foreign constraints in db, pls add @@index on manually
}

// TODO # foreign key using pk, instead of id, for better performance?

// # db sharding base on tenantPk: 
// 1. pk segmentation, ALTER SEQUENCE [表名]_[id]_seq RESTART WITH 1001;
// 2. shard tenant based on tenant_id, eq (0~10000] db1, (10000,20000] db2

//////////////////// Authentication and Account ////////////////////////////

model Tenant {
  pk         Int     @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  id         String  @unique @db.VarChar(36)
  emailHost  String? @unique @db.VarChar(36) /// @description unique tenant email host
  name       String? @db.VarChar(50)
  avatar     String? @db.VarChar(1023)
  type       Int     @default(1) /// @description account type: 1: individual, 2: organization.
  statusCode Int     @default(0) /// @description user statusCode: 0: pending, 1: active, -1: inactive.

  User User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.
}

model User {
  pk     Int     @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  id     String  @unique @db.VarChar(36)
  name   String  @db.VarChar(36)
  email  String? @db.VarChar(255) /// @description account primary verified email
  avatar String? @db.VarChar(1023)
  locale String? @default("en_US") @db.VarChar(10)

  tenant       Tenant         @relation(fields: [tenantPk], references: [pk])
  /// @DtoRelationIncludeId
  // add to migration.sql
  tenantPk     Int            @default(dbgenerated("(current_setting('tenancy.tenantPk')::int)"))
  /// @DtoReadOnly
  /// @DtoEntityHidden
  userIdentity UserIdentity[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@index([tenantPk])
}

model UserIdentity {
  pk             Int     @id @default(autoincrement())
  /// @DtoReadOnly
  /// @DtoEntityHidden
  // add to migration.sql
  tenantPk       Int     @default(dbgenerated("(current_setting('tenancy.tenantPk')::int)"))
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  provider       String  @db.VarChar(36)
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  uid            String  @db.VarChar(255) /// @description userId from provider.
  credentials    String  @db.VarChar(2048) /// @description auth secret or token
  name           String? @db.VarChar(255)
  /// @MinLength(6)
  /// @IsEmail
  /// @example user@example.com
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  email          String? @db.VarChar(255)
  email_verified Boolean @default(false)
  avatar         String? @db.VarChar(1023)
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  /// @description  authentication info from realm
  info           Json?   @db.Json

  user   User   @relation(fields: [userPk], references: [pk])
  userPk Int
  /// @DtoReadOnly
  /// @DtoEntityHidden
  userId String @db.VarChar(36)

  // expiresAt DateTime? @db.Timestamp(0) // @description TODO: token expiration time
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@unique([provider, uid])
  @@index([userPk])
  @@index([userId])
  @@index([tenantPk])
}

/// @DtoIgnoreModel
/// @description non-organization email hosts
model PublicMailHost {
  pk      Int    @id @default(autoincrement())
  /// @description starts with `.`, e.g.: '.gmail.com', '.hotmail.com'
  dotHost String @unique @db.VarChar(255)

  createdAt DateTime @default(now())
}

//////////////////// Callgent ////////////////////////////

/// @DtoIgnoreModel
model Tag {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(30)
  avatar      String? @db.VarChar(1023)
  description String  @db.VarChar(1024)
}

model Callgent {
  /// @DtoEntityHidden
  pk       Int    @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  id       String @unique @db.VarChar(36)
  /// @DtoReadOnly
  /// @DtoEntityHidden
  // add to migration.sql
  tenantPk Int    @default(dbgenerated("(current_setting('tenancy.tenantPk')::int)"))

  name        String  @db.VarChar(255)
  avatar      String? @db.VarChar(1023)
  /// @description Summary to quickly understand in what scenarios to use this service.
  summary     String? @db.VarChar(4095)
  /// @description Instruction to know roughly on how to use this service: concepts/operations etc.
  instruction String? @db.VarChar(4095)

  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  liked    Int @default(0)
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  viewed   Int @default(0)
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  forked   Int @default(0)
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  favorite Int @default(0)

  official Boolean @default(false)
  featured Boolean @default(false)

  /// @DtoReadOnly
  /// @DtoEntityHidden
  forkedPk  Int? /// @description forked from
  /// @CustomValidator(EntityIdExists, 'tag', 'id', ../../infras/repo/validators/entity-exists.validator)
  mainTagId Int?

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String    @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  entries Entry[]

  @@unique([tenantPk, name])
  @@index([tenantPk])
  @@index([forkedPk])
  @@index([mainTagId])
}

/// @DtoIgnoreModel
model CallgentTag {
  pk Int @id @default(autoincrement())

  tagId      Int
  callgentId String @db.VarChar(36)

  createdAt DateTime @default(now())

  @@unique([callgentId, tagId])
  @@index([tagId])
  @@index([callgentId])
}

enum EntryType {
  CLIENT
  SERVER
  EVENT
}

/// @description a callgent may have multiple entries, including client/server/event entries
model Entry {
  /// @DtoEntityHidden
  pk       Int    @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  id       String @unique @db.VarChar(36)
  /// @DtoReadOnly
  /// @DtoEntityHidden
  // add to migration.sql
  tenantPk Int    @default(dbgenerated("(current_setting('tenancy.tenantPk')::int)"))

  name        String    @default("") @db.VarChar(2047)
  /// @description Summary to quickly understand in what scenarios to use this service.
  summary     String?   @db.VarChar(4095)
  /// @description Instruction to know roughly on how to use this service: concepts/operations etc.
  instruction String?   @db.VarChar(4095)
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  type        EntryType /// @description entry type: CLIENT, SERVER OR EVENT
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  adaptorKey  String    @db.VarChar(127) /// @description entry adaptor key
  priority    Int       @default(0) /// @description priority in the callgent

  /// @DtoCreateOptional
  host       String @db.VarChar(2047) /// @description host address, client entry host are *generated*, e.g. '/api/rest/invoke/rbhes0-w4rff/{id}', where `{id}` will be replaced with current entry id
  initParams Json?  @db.Json /// @description initializing parameters
  content    Json?  @db.Json /// @description generated content/code by init method
  /// @DtoReadOnly
  /// @DtoPlainApiResponse
  /// @DtoCastType(RealmSecurityVO, ../../callgent-realms/dto/realm-security.vo)
  securities Json[] @db.Json /// @description RealmSecurityVO[], where RealmSecurityVO{ [realmPk]: RealmSecurityItem }

  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  /// @CustomValidator(EntityIdExists, 'callgent', 'id', ../../infras/repo/validators/entity-exists.validator)
  /// @DtoRelationIncludeId
  callgentId String   @db.VarChar(36) /// @description callgent owning the entry
  callgent   Callgent @relation(fields: [callgentId], references: [id])

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String    @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@index([tenantPk])
  @@index([callgentId])
}

/// @description endpoint in openAPI.json format
model Endpoint {
  /// @DtoEntityHidden
  pk       Int    @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  id       String @unique @db.VarChar(36)
  /// @DtoReadOnly
  /// @DtoEntityHidden
  // add to migration.sql
  tenantPk Int    @default(dbgenerated("(current_setting('tenancy.tenantPk')::int)"))

  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  name        String  @db.VarChar(1023) /// @description `${method} ${path}`
  path        String  @db.VarChar(1000) /// @description openAPI path
  method      String  @db.VarChar(15) /// @description openAPI method
  summary     String? @db.VarChar(2047)
  description String? @db.VarChar(4095)
  servers     Json[]  @db.Json /// @description openAPI servers
  /// @DtoCastType(RealmSecurityVO, ../../callgent-realms/dto/realm-security.vo)
  securities  Json[]  @db.Json /// @description RealmSecurityVO[], where RealmSecurityVO{ [realmName]: RealmSecurityItem }
  params      Json?   @db.Json /// @description declaration of API params
  responses   Json?   @db.Json /// @description declaration of API responses
  rawJson     Json    @db.Json

  // @DtoReadOnly
  /// @CustomValidator(EntityIdExists, 'callgent', 'id', ../../infras/repo/validators/entity-exists.validator)
  callgentId String  @db.VarChar(36)
  /// @description An endpoint is bound to a server entry
  /// @CustomValidator(EntityIdExists, 'entry', 'id', ../../infras/repo/validators/entity-exists.validator)
  entryId    String? @db.VarChar(36)
  /// @description whether async endpoint, e.g. invoked by email adaptor
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  isAsync    Boolean @db.Boolean
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  adaptorKey String  @db.VarChar(127) /// @description entry adaptor key
  cacheKey   String? @db.VarChar(511) /// @description {string | (endpoint, request)=> string}; if empty&method=='get': cache by name, else no cache
  cacheTtl   Int?    @default(0) @db.Integer /// @description in seconds. < 0 means no cache, 0&isAsync means cache pending response, else >0 cache

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String    @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@unique([callgentId, name])
  @@index([tenantPk])
  @@index([callgentId])
  @@index([entryId])
}

/// @description security realms for callgent
model CallgentRealm {
  /// @DtoReadOnly
  /// @DtoPlainApiResponse
  pk       Int @id @default(autoincrement())
  /// @DtoReadOnly
  /// @DtoEntityHidden
  // add to migration.sql
  tenantPk Int @default(dbgenerated("(current_setting('tenancy.tenantPk')::int)"))

  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  /// @CustomValidator(EntityIdExists, 'callgent', 'id', ../../infras/repo/validators/entity-exists.validator)
  callgentId String @db.VarChar(36)
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  realmKey   String @db.VarChar(256) /// @description unique[callgentId, realmKey], to identify same realm in callgent.

  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  authType String  @db.VarChar(16) /// @description auth type, 'apiKey' | 'http' | 'oauth2' | 'openIdConnect' | 'password' | ..etc.
  /// @description provider defined realm name, or '' for default realm
  /// @IsOptional()
  realm    String? @default("") @db.VarChar(36)
  /// @DtoUpdateOptional
  /// @DtoCastType(RealmSchemeVO, ../dto/realm-scheme.vo)
  scheme   Json    @db.Json /// @description security scheme, with all public configs
  secret   Json?   @db.Json /// @description security secret, with all private configs

  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  perUser Boolean @default(false) /// @description whether the realm is per user auth
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  enabled Boolean @default(true) /// @description whether the realm is enabled

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([callgentId, realmKey])
  @@index(callgentId)
  @@index(tenantPk)
}

// model RealmToken merged into UserIdentity

model Task {
  /// @DtoEntityHidden
  pk       Int    @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  id       String @unique @db.VarChar(36)
  /// @DtoReadOnly
  /// @DtoEntityHidden
  // add to migration.sql
  tenantPk Int    @default(dbgenerated("(current_setting('tenancy.tenantPk')::int)"))

  statusCode Int     @default(1) /// @description Task statusCode, 1: pending, 0: done, <0: failed
  name       String? @db.VarChar(64) /// @description task name
  brief      String? @db.VarChar(255) /// @description task brief or description
  content    Json? /// @description optional task content

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String    @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@index([tenantPk])
}

model TaskAction {
  /// @DtoEntityHidden
  pk       Int    @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  id       String @unique @db.VarChar(36)
  /// @DtoReadOnly
  /// @DtoEntityHidden
  // add to migration.sql
  tenantPk Int    @default(dbgenerated("(current_setting('tenancy.tenantPk')::int)"))

  // client side information
  /// @description action owner callgent id, responsible for progressive response
  ceId        String? @db.VarChar(36) /// @description client entry id
  epName      String? @db.VarChar(255) /// @description optional endpoint name
  cAdaptor    String  @db.VarChar(36) /// @description client adaptor key
  callback    Json?   @db.Json /// @description callback url template or endpoint
  progressive String? @db.VarChar(36) /// @description progressive requesting url template or endpoint

  // processing
  returns    Boolean @default(false) /// @description whether action has response object
  req        Json    @db.Json /// @description request object
  res        Json?   @db.Json /// @description response object
  stage      Int     @default(-1) /// @description processing stage in the task, -1: init; 0: done
  statusCode Int     @default(0) /// execution status code
  message    String? @db.VarChar(255) /// @description error message

  // @DtoReadOnly
  /// @CustomValidator(EntityIdExists, 'callgent', 'id', ../../infras/repo/validators/entity-exists.validator)
  taskId String @db.VarChar(36)

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String    @db.VarChar(36) /// @description user id, anonymous ip, etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@index([tenantPk])
  @@index([taskId])
}

/// @description Platform auth tokens
/// @DtoIgnoreModel
model AuthToken {
  /// @DtoEntityHidden
  pk Int @id @default(autoincrement())

  token   String  @unique @db.VarChar(36)
  type    String  @db.VarChar(10) /// @description token type: JWT, API_KEY, ..
  /// @DtoCastType(JwtPayload, ../infras/auth/jwt/jwt.service)
  payload Json
  revoked Boolean @default(false)

  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

/// @DtoIgnoreModel
model LlmTemplate {
  /// @DtoEntityHidden
  pk Int @id @default(autoincrement())

  name   String @db.VarChar(32)
  prompt String @db.VarChar(4096)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([name])
}

/// @DtoIgnoreModel
model LlmCache {
  /// @DtoEntityHidden
  pk BigInt @id @default(autoincrement())

  name   String @db.VarChar(32)
  model  String @db.VarChar(127)
  prompt String @db.VarChar(8192)
  result String @db.VarChar(8192)

  createdAt DateTime @default(now())

  @@index([prompt], type: Hash)
  @@index([model, name])
}

/// @DtoIgnoreModel
/// @description repo to store req2Args mapping code when invoking(not requesting) sep from cep
model Req2ArgsRepo {
  pk BigInt @id @default(autoincrement())

  cepId    String @db.VarChar(36) /// @description source client endpoint id receiving the request
  sepId    String @db.VarChar(36) /// @description target server endpoint id processing the request
  req2Args String @db.VarChar(8192) /// @description js function req2Args(req) to convert request to args

  createdBy String?  @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([cepId, sepId])
}

enum ServiceType {
  SERVICE
  CALLGENT
}

model EventListener {
  /// @DtoEntityHidden
  pk       Int    @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  id       String @unique @db.VarChar(36)
  /// @DtoReadOnly
  /// @DtoEntityHidden
  // add to migration.sql
  tenantPk Int    @default(dbgenerated("(current_setting('tenancy.tenantPk')::int)"))

  srcId String @db.VarChar(36) /// @description event source id

  eventType String @db.VarChar(36)
  dataType  String @db.VarChar(36)
  priority  Int?   @default(0)

  serviceType ServiceType // callgent, service
  serviceName String      @db.VarChar(255)
  funName     String      @db.VarChar(255)
  description String      @default("") @db.VarChar(2000)
  // TODO add the listener's input/output props in event.context, for automatic checking

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String    @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@index([srcId])
  @@index([tenantPk])
}

enum EventCallbackType {
  URL
  EVENT
}

model EventStore {
  /// @DtoEntityHidden
  pk BigInt @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  id String @unique @db.VarChar(36)

  /// @Description src entity id which bind to the listener
  srcId        String            @db.VarChar(36)
  /// @Description target id to relate several events
  taskId       String?           @db.VarChar(36)
  eventType    String            @db.VarChar(36)
  dataType     String            @db.VarChar(36)
  /// @Description callback url or parent event id to invoke
  callback     String?           @db.VarChar(1023)
  /// @Description callback type, 'URL' or 'EVENT'
  callbackType EventCallbackType @default(EVENT)

  // data    Json? @db.Json
  context Json? @db.Json

  /// @description statusCode, 1: processing, 0: done, 2: pending: waiting for external event trigger to to resume calling current-listener.funName, <0: error
  statusCode      Int     @default(1)
  message         String? @db.VarChar(255)
  stopPropagation Boolean /// @description stop propagation to next listeners
  listenerId      String? @db.VarChar(36)
  funName         String? @db.VarChar(255) /// @description listener's function to call on pending event activated.

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@index([srcId])
  @@index([taskId])
}

/// @DtoSingularModel
model Cached {
  /// @DtoEntityHidden
  pk BigInt @id @default(autoincrement())

  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  sepId    String   @db.VarChar(36)
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  /// @description source event id
  sourceId String   @db.VarChar(36)
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  cacheKey String   @db.VarChar(511)
  /// @DtoCastType(RestApiResponse<any>, ../../restapi/response.interface)
  response Json     @db.Json
  eventIds String[] @db.VarChar(36)

  createdAt DateTime @default(now())
  /// @description updated when async callback
  updatedAt DateTime @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  // deletedAt DateTime? /// @description logical deletion.

  @@unique([sepId, cacheKey])
}
