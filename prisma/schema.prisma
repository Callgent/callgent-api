generator client {
  provider = "prisma-client-js"
}

// to generate dtos/entities
generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src"
  outputToNestJsResourceStructure = "true"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "kebab"
  classValidation                 = "true"
  prettier                        = "true"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// db sharding base on tenantId: 
// 1. id segmentation, ALTER SEQUENCE [表名]_[id]_seq RESTART WITH 1001;
// 2.chard tenant based on tenant_id, eq (0~10000] db1, (10000,20000] db2

//////////////////// Authentication and Account ////////////////////////////

model Tenant {
  id       Int     @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  uuid     String  @unique @db.VarChar(36)
  mailHost String? @unique @db.VarChar(36) /// @description unique tenant mail host
  name     String? @db.VarChar(50)
  avatar   String? @db.VarChar(1023)
  type     Int     @default(1) /// @description account type: 1: individual, 2: organization.
  status   Int     @default(0) /// @description user status: 0: pending, 1: active, -1: inactive.

  User User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.
}

model User {
  id     Int     @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  uuid   String  @unique @db.VarChar(36)
  name   String  @db.VarChar(36)
  avatar String? @db.VarChar(1023)

  tenant       Tenant         @relation(fields: [tenantId], references: [id])
  /// @DtoRelationIncludeId
  tenantId     Int            @default(dbgenerated("(current_setting('tenancy.tenantId')::int)"))
  /// @DtoReadOnly
  /// @DtoEntityHidden
  userIdentity UserIdentity[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@index([tenantId])
}

model UserIdentity {
  id             Int     @id @default(autoincrement())
  /// @DtoReadOnly
  /// @DtoEntityHidden
  tenantId       Int     @default(dbgenerated("(current_setting('tenancy.tenantId')::int)"))
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  provider       String  @db.VarChar(36)
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  uid            String  @db.VarChar(255) /// @description userId from provider.
  credentials    String  @db.VarChar(2048) /// @description user cridentials
  name           String? @db.VarChar(255)
  /// @MinLength(6)
  /// @IsEmail
  /// @example user@example.com
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  email          String? @db.VarChar(255)
  email_verified Boolean @default(false)
  avatar         String? @db.VarChar(1023)
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  info           Json?   @map("info") /// @description  authentication info from realm

  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  /// @DtoReadOnly
  /// @DtoEntityHidden
  userUuid String @db.VarChar(36)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@unique([provider, uid])
  @@index([userId])
  @@index([userUuid])
  @@index([tenantId])
}

/// @DtoIgnoreModel
/// @description non-organization email hosts
model PublicMailHost {
  id      Int    @id @default(autoincrement())
  /// @description starts with `.`, e.g.: '.gmail.com', '.hotmail.com'
  dotHost String @unique @db.VarChar(255)

  createdAt DateTime @default(now())
}

//////////////////// Botlet ////////////////////////////

model Botlet {
  /// @DtoEntityHidden
  id       Int    @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  uuid     String @unique @db.VarChar(36)
  /// @DtoReadOnly
  /// @DtoEntityHidden
  tenantId Int    @default(dbgenerated("(current_setting('tenancy.tenantId')::int)"))

  name    String  @db.VarChar(255)
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  summary String? @db.VarChar(4095)

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String    @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@unique([tenantId, name])
  @@index([tenantId])
}

model BotletMethod {
  /// @DtoEntityHidden
  id       Int    @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  uuid     String @unique @db.VarChar(36)
  /// @DtoReadOnly
  /// @DtoEntityHidden
  tenantId Int    @default(dbgenerated("(current_setting('tenancy.tenantId')::int)"))

  name      String @db.VarChar(255)
  /// @description js function signature to invoke this botlet method
  signature String @db.VarChar(255)
  /// @description js function api docs
  documents String @db.VarChar(4095)
  /// @description js function actual code to invoke this botlet method
  arrowFunc String @db.VarChar(1023)
  /// @description endpoint uuid or command or code
  content   Json   @db.Json

  // @DtoReadOnly
  /// @CustomValidator(EntityIdExists, 'botlet', 'uuid', ../../infra/repo/validators/entity-exists.validator)
  botletUuid   String  @db.VarChar(36)
  /// @description actual server endpoint, when action type is `ENDPOINT`
  /// @CustomValidator(EntityIdExists, 'endpoint', 'uuid', ../../infra/repo/validators/entity-exists.validator)
  endpointUuid String? @db.VarChar(36)

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String    @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@unique([botletUuid, name])
  @@index([tenantId])
  @@index([botletUuid])
}

model Task {
  /// @DtoEntityHidden
  id       Int    @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  uuid     String @unique @db.VarChar(36)
  /// @DtoReadOnly
  /// @DtoEntityHidden
  tenantId Int    @default(dbgenerated("(current_setting('tenancy.tenantId')::int)"))

  status  Int     @default(-1) /// @description Task status, -1: pending, 0: done, <-1: failed
  name    String? @db.VarChar(64) /// @description task name
  brief   String? @db.VarChar(255) /// @description task brief or description
  content Json? /// @description optional task content

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String    @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@index([tenantId])
}

model TaskAction {
  /// @DtoEntityHidden
  id       Int    @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  uuid     String @unique @db.VarChar(36)
  /// @DtoReadOnly
  /// @DtoEntityHidden
  tenantId Int    @default(dbgenerated("(current_setting('tenancy.tenantId')::int)"))

  // client side information
  /// @description action owner botlet uuid, responsible for progressive response
  ownerUuid String? @db.VarChar(36)
  cepUuid   String? @db.VarChar(36) /// @description client endpoint uuid
  cAdaptor  String  @db.VarChar(36) /// @description client adaptor key
  callback  Json?   @db.Json /// @description callback params

  // processing
  returns Boolean @default(false) /// @description whether action has response object
  stage   Int     @default(-1) /// @description processing stage in the task, -1: init; 0: done
  req     Json    @db.Json /// @description request object
  res     Json?   @db.Json /// @description response object

  // @DtoReadOnly
  /// @CustomValidator(EntityIdExists, 'botlet', 'uuid', ../../infra/repo/validators/entity-exists.validator)
  taskUuid String @db.VarChar(36)

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String    @db.VarChar(36) /// @description user uuid, anonymous ip, etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@index([tenantId])
  @@index([taskUuid])
}

/// @DtoIgnoreModel
model AuthToken {
  /// @DtoEntityHidden
  id Int @id @default(autoincrement())

  token   String  @unique @db.VarChar(36)
  type    String  @db.VarChar(10) /// @description token type: JWT, API_KEY, ..
  /// @DtoCastType(JwtPayload, ../infra/auth/jwt/jwt.service)
  payload Json
  revoked Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum EndpointType {
  CLIENT
  SERVER
  EVENT
}

/// @description a botlet may have multiple endpoints, including receiver & sender
model Endpoint {
  /// @DtoEntityHidden
  id       Int    @id @default(autoincrement())
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  uuid     String @unique @db.VarChar(36)
  /// @DtoReadOnly
  /// @DtoEntityHidden
  tenantId Int    @default(dbgenerated("(current_setting('tenancy.tenantId')::int)"))

  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  type       EndpointType /// @description endpoint type: CLIENT, SERVER OR EVENT
  /// @DtoCreateApiResponse
  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  adaptorKey String       @db.VarChar(127) /// @description endpoint adaptor key
  priority   Int          @default(0) /// @description priority in the botlet

  host       Json  @db.Json /// @description host address & configs
  initParams Json? @db.Json /// @description initializing parameters
  content    Json? @db.Json /// @description generated content/code by init method

  /// @DtoUpdateApiResponse
  /// @DtoPlainApiResponse
  /// @CustomValidator(EntityIdExists, 'botlet', 'uuid', ../../infra/repo/validators/entity-exists.validator)
  botletUuid String @db.VarChar(36) /// @description botlet owning the endpoint

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String    @db.VarChar(36)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  // DONOT FORGET TO ADD the model into `createSoftDeleteMiddleware`
  /// @DtoReadOnly
  /// @DtoEntityHidden
  deletedAt DateTime? /// @description logical deletion.

  @@index([tenantId])
  @@index([botletUuid])
}

enum EndpointAuthType {
  NONE /// @description no auth, or treat auth as normal progressive params
  APP /// @description all task same auth
  USER /// @description auth each task owner/assignee
}

/// @description endpoint app or user auth credentials
model EndpointAuth {
  /// @DtoEntityHidden
  id       Int @id @default(autoincrement())
  /// @DtoReadOnly
  /// @DtoEntityHidden
  tenantId Int @default(dbgenerated("(current_setting('tenancy.tenantId')::int)"))

  /// @CustomValidator(EntityIdExists, 'endpoint', 'uuid', ../../infra/repo/validators/entity-exists.validator)
  endpointUuid String  @db.VarChar(36) /// @description endpoint uuid.
  userKey      String? @db.VarChar(63) /// @description unique user key, e.g. assignee userId

  credentials Json @db.Json /// @description auth credentials

  /// @DtoReadOnly
  /// @DtoEntityHidden
  createdBy String   @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([endpointUuid, userKey])
  @@index([tenantId])
  @@index([endpointUuid])
}

/// @DtoIgnoreModel
model LlmTemplate {
  /// @DtoEntityHidden
  id Int @id @default(autoincrement())

  name   String @db.VarChar(32)
  prompt String @db.VarChar(4096)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([name])
}

/// @DtoIgnoreModel
model LlmCache {
  /// @DtoEntityHidden
  id Int @id @default(autoincrement())

  name   String @db.VarChar(32)
  prompt String @db.VarChar(4096)
  result String @db.VarChar(4096)

  createdAt DateTime @default(now())

  @@unique([prompt, name])
}
