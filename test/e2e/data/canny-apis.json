{
	"openapi": "3.0.0",
	"info": {
		"title": "Canny API",
		"version": "1.0.0"
	},
	"servers": [{
		"url": "https://canny.io/api/v1"
	}],
	"paths": {
		"/boards/list": {
			"post": {
				"summary": "List all boards",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"apiKey": {
										"type": "string",
										"description": "Your secret API key."
									}
								},
								"required": ["apiKey"]
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "A dictionary with a \"boards\" property that contains an array of board objects.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"boards": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/Board"
											}
										},
										"hasMore": {
											"type": "boolean",
											"description": "Specifies whether this query returns more boards than the limit."
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/boards/retrieve": {
			"post": {
				"summary": "Retrieve board",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"apiKey": {
										"type": "string",
										"description": "Your secret API key."
									},
									"id": {
										"type": "string",
										"description": "The board's unique identifier."
									}
								},
								"required": ["apiKey", "id"]
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Returns a board object, if a valid id was supplied.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Board"
								}
							}
						}
					}
				}
			}
		},
		"/categories/list": {
			"post": {
				"summary": "List categories",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"apiKey": {
										"type": "string",
										"description": "Your secret API key."
									},
									"boardID": {
										"type": "string",
										"description": "The id of the board you'd like to fetch categories for."
									},
									"limit": {
										"type": "integer",
										"description": "The number of categories you'd like to fetch. Defaults to 10 if not specified. Max of 10000."
									},
									"skip": {
										"type": "integer",
										"description": "The number of categories you'd like to skip before starting to fetch. Defaults to 0 if not specified."
									}
								},
								"required": ["apiKey"]
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "A dictionary with a \"categories\" property that contains an array of tag objects. There's also a \"hasMore\" property that specifies whether this query returns more categories than the limit.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"categories": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/Category"
											}
										},
										"hasMore": {
											"type": "boolean",
											"description": "Specifies whether this query returns more categories than the limit."
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Board": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the board."
					},
					"created": {
						"type": "string",
						"description": "Time at which the board was created, in ISO 8601 format."
					},
					"isPrivate": {
						"type": "boolean",
						"description": "Whether or not the board is set as private in the administrative settings."
					},
					"name": {
						"type": "string",
						"description": "The board's name."
					},
					"postCount": {
						"type": "integer",
						"description": "The number of non-deleted posts associated with the board. This number includes posts that are marked as closed or complete."
					},
					"privateComments": {
						"type": "boolean",
						"description": "Whether or not comments left on posts can be viewed by other end-users."
					},
					"url": {
						"type": "string",
						"description": "The URL to the board's page."
					}
				}
			},
			"Category": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the category."
					},
					"board": {
						"$ref": "#/components/schemas/Board",
						"description": "The board this category is associated with."
					},
					"created": {
						"type": "string",
						"description": "Time at which the category was created, in ISO 8601 format."
					},
					"name": {
						"type": "string",
						"description": "The name of the category."
					},
					"parentID": {
						"type": "string",
						"description": "The id of the parent category. If this category is not a sub category, this field will be null."
					},
					"postCount": {
						"type": "integer",
						"description": "The number of posts that have been assigned this category."
					},
					"url": {
						"type": "string",
						"description": "The URL to the board, filtered to just posts that have been assigned this category."
					}
				}
			},
			"Entry": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the entry."
					},
					"created": {
						"type": "string",
						"description": "Time at which the entry was first created, in ISO 8601 format."
					},
					"labels": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "The list of labels that the entry is associated with."
					},
					"lastSaved": {
						"type": "string",
						"description": "Time at which the entry was last updated, in ISO 8601 format."
					},
					"markdownDetails": {
						"type": "string",
						"description": "The markdown contents of the entry."
					},
					"plaintextDetails": {
						"type": "string",
						"description": "The plaintext contents of the entry, with images, videos, and links stripped."
					},
					"posts": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Post"
						},
						"description": "The list of posts this entry is linked to."
					},
					"publishedAt": {
						"type": "string",
						"description": "Time at which the entry was published, if it has been published."
					},
					"scheduledFor": {
						"type": "string",
						"description": "Time at which the entry is schedule to be published, if it is scheduled."
					},
					"reactions": {
						"type": "object",
						"description": "The number of reactions an entry has received."
					},
					"status": {
						"type": "string",
						"description": "The status of the entry, describing whether it has been published. Will be set to draft, scheduled, or published."
					},
					"title": {
						"type": "string",
						"description": "The title of the entry."
					},
					"types": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "The list of types associated with the entry. Can include new, improved, or fixed."
					},
					"url": {
						"type": "string",
						"description": "The public URL to the entry page on Canny."
					}
				}
			},
			"Comment": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the comment."
					},
					"author": {
						"$ref": "#/components/schemas/User",
						"description": "The user who created the comment."
					},
					"board": {
						"$ref": "#/components/schemas/Board",
						"description": "The board the comment is associated with."
					},
					"created": {
						"type": "string",
						"description": "Time at which the comment was created, in ISO 8601 format."
					},
					"imageURLs": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "An array of the URLs of the images associated with this comment."
					},
					"internal": {
						"type": "boolean",
						"description": "Whether or not the comment is an internal comment."
					},
					"likeCount": {
						"type": "integer",
						"description": "The number of likes a comment has received."
					},
					"mentions": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"description": "An array of user objects who are mentioned in the comment."
					},
					"parentID": {
						"type": "string",
						"description": "The id of the comment that this comment is a reply to. If this comment is not a reply, this field will be null."
					},
					"post": {
						"$ref": "#/components/schemas/Post",
						"description": "The post the comment is associated with."
					},
					"private": {
						"type": "boolean",
						"description": "If the comment is private from other users, only applies if the \"Allow end-users to see each others' comments\" setting is disabled."
					},
					"reactions": {
						"type": "object",
						"description": "The number of reactions a comment has received."
					},
					"value": {
						"type": "string",
						"description": "The text value of this comment."
					}
				}
			},
			"Company": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the company."
					},
					"created": {
						"type": "string",
						"description": "Time at which the company was created, in ISO 8601 format."
					},
					"customFields": {
						"type": "object",
						"description": "Any custom fields associated with the company."
					},
					"domain": {
						"type": "string",
						"description": "The company's domain."
					},
					"memberCount": {
						"type": "integer",
						"description": "The number of users associated with the company."
					},
					"monthlySpend": {
						"type": "number",
						"description": "The company's monthly spend."
					},
					"name": {
						"type": "string",
						"description": "The company's name."
					}
				}
			},
			"Opportunity": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the opportunity."
					},
					"closed": {
						"type": "boolean",
						"description": "Whether the opportunity is closed."
					},
					"name": {
						"type": "string",
						"description": "The name of the opportunity."
					},
					"postIDs": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "The list of post ids this opportunity is linked to."
					},
					"salesforceOpportunityID": {
						"type": "string",
						"description": "The unique identifier for the opportunity in Salesforce."
					},
					"value": {
						"type": "number",
						"description": "The value of the opportunity."
					},
					"won": {
						"type": "boolean",
						"description": "Whether the opportunity has been won."
					}
				}
			},
			"Post": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the post."
					},
					"author": {
						"$ref": "#/components/schemas/User",
						"description": "The user who authored the post. If the author's account has been deleted, this field will be null."
					},
					"board": {
						"$ref": "#/components/schemas/Board",
						"description": "The board this post is associated with."
					},
					"by": {
						"$ref": "#/components/schemas/User",
						"description": "The user who created the post on behalf of the author."
					},
					"category": {
						"$ref": "#/components/schemas/Category",
						"description": "The category this post is assigned to, if any."
					},
					"commentCount": {
						"type": "integer",
						"description": "The number of non-deleted comments associated with this post."
					},
					"created": {
						"type": "string",
						"description": "Time at which the post was created, in ISO 8601 format."
					},
					"clickup": {
						"type": "object",
						"properties": {
							"linkedTasks": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string",
											"description": "The unique identifier of the Clickup task."
										},
										"linkID": {
											"type": "string",
											"description": "The unique identifier of the link between the post and the Clickup task."
										},
										"name": {
											"type": "string",
											"description": "The name of the Clickup task."
										},
										"postID": {
											"type": "string",
											"description": "The unique identifier of the post."
										},
										"status": {
											"type": "string",
											"description": "The status of the Clickup task."
										},
										"url": {
											"type": "string",
											"description": "The URL of the Clickup task."
										}
									}
								}
							},
							"description": "A list of Clickup tasks that are linked with this post"
						},
						"details": {
							"type": "string",
							"description": "Any details the user included in the post. This is the longer text field (where the shorter one is \"title\")."
						},
						"eta": {
							"type": "string",
							"description": "The month and year the post is estimated to be delivered."
						},
						"imageURLs": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "An array of the URLs of the images associated with this post"
						},
						"jira": {
							"type": "object",
							"properties": {
								"linkedIssues": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string",
												"description": "The unique identifier of the Jira issue."
											},
											"key": {
												"type": "string",
												"description": "The key of the Jira issue."
											},
											"url": {
												"type": "string",
												"description": "The URL of the Jira issue."
											}
										}
									}
								}
							},
							"description": "A list of Jira issues that are linked with this post"
						},
						"owner": {
							"$ref": "#/components/schemas/User",
							"description": "The owner of the post"
						},
						"score": {
							"type": "integer",
							"description": "The number of votes that have been cast on this post."
						},
						"status": {
							"type": "string",
							"description": "The post's status: \"open\", \"under review\", \"planned\", \"in progress\", \"complete\", \"closed\", or any other status your team has set on the settings page."
						},
						"statusChangedAt": {
							"type": "string",
							"description": "Time at which the post's status was last changed"
						},
						"tags": {
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/Tag"
							},
							"description": "The list of tag objects associated with this post."
						},
						"title": {
							"type": "string",
							"description": "A brief title describing the post. This is the shorter text input (where the longer is details)."
						},
						"url": {
							"type": "string",
							"description": "The URL to the post's page."
						}
					}
				}
			},
			"StatusChange": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the status change."
					},
					"changeComment": {
						"$ref": "#/components/schemas/Comment",
						"description": "The comment attached to this status change. Only imageURLs and value fields are included."
					},
					"changer": {
						"$ref": "#/components/schemas/User",
						"description": "The user who changed the status."
					},
					"created": {
						"type": "string",
						"description": "Time at which the status was changed, in ISO 8601 format."
					},
					"post": {
						"$ref": "#/components/schemas/Post",
						"description": "The post that had its status changed."
					},
					"status": {
						"type": "string",
						"description": "The status the post was changed to."
					}
				}
			},
			"Tag": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the tag."
					},
					"board": {
						"$ref": "#/components/schemas/Board",
						"description": "The board this tag is associated with."
					},
					"created": {
						"type": "string",
						"description": "Time at which the tag was created, in ISO 8601 format."
					},
					"name": {
						"type": "string",
						"description": "The name of the tag."
					},
					"postCount": {
						"type": "integer",
						"description": "The number of posts that have been assigned this tag."
					},
					"url": {
						"type": "string",
						"description": "The URL to the board, filtered to just posts that have been assigned this tag."
					}
				}
			},
			"User": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the user."
					},
					"avatarURL": {
						"type": "string",
						"description": "Link to the user's avatar image."
					},
					"companies": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Company"
						},
						"description": "A list of companies the user is associated with."
					},
					"created": {
						"type": "string",
						"description": "Time at which the user was created, in ISO 8601 format."
					},
					"customFields": {
						"type": "object",
						"description": "Any custom fields associated with the user."
					},
					"email": {
						"type": "string",
						"description": "The user's email. This field can be null, for example when you create a new user by voting on behalf of them."
					},
					"isAdmin": {
						"type": "boolean",
						"description": "Whether or not the user is a Canny admin."
					},
					"lastActivity": {
						"type": "string",
						"description": "Time at which the user interacted with your company for the last time, in ISO 8601 format."
					},
					"name": {
						"type": "string",
						"description": "The user's name."
					},
					"url": {
						"type": "string",
						"description": "The URL of the user's profile."
					},
					"userID": {
						"type": "string",
						"description": "The user's unique identifier in your application. This field can be null. We only have this data if the user was authenticated via single sign-on, or if it was added via API."
					}
				}
			},
			"Vote": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier for the vote."
					},
					"board": {
						"$ref": "#/components/schemas/Board",
						"description": "The board this vote is associated with."
					},
					"by": {
						"$ref": "#/components/schemas/User",
						"description": "The admin who cast this vote on behalf of a user. If the user voted themselves, this field will be null."
					},
					"created": {
						"type": "string",
						"description": "Time at which the vote was first cast, in ISO 8601 format."
					},
					"post": {
						"$ref": "#/components/schemas/Post",
						"description": "The post this vote is associated with."
					},
					"voter": {
						"$ref": "#/components/schemas/User",
						"description": "The user this post is associated with."
					}
				}
			}
	}
    }
}